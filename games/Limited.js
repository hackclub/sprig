/*
@title: sky high
@description: A simple push-the-box puzzle game.
@author: leo, edits
@tags: ['puzzle', 'sokoban']
@addedOn: 2022-07-26
*/

// Define the sprites in our game
const player = "p";
const box = "b";
const goal = "g";
const wall = "w";
const wasd = "z";
const use = "u";
const to = "t";
const move = "m";
const push = "q";
const into = "i";
const but = "c";
const dont = "d";
const go = "h";
const over = "o";
const your = "y";
const limit = "l";
const j = "j";
const resta = "r";
const rt = "s";
const movableblock = "v";

// Create a tune:
const melody = tune`
500,
500: C4~500 + E4/500,
15000`
const win = tune`
500,
500: B5/500 + A5/500 + G5/500 + E4~500 + D4~500,
500: D4~500 + C4~500 + E4~500 + B5/500 + A5/500,
500: B5^500 + A5^500 + E4^500 + D4^500,
500: E4^500 + D4^500 + B5^500 + A5^500,
500: E4~500 + A5~500,
500: E4~500 + A5~500,
12500`

const playback = playTune(melody, Infinity)
// Assign bitmap art to each sprite

setLegend(
  [ player, bitmap`
................
.....4444.......
....4....4......
...4.0..0.4.....
...4......4.....
...4..00..4.....
....4....4......
.....4444.......
......44........
.......44.......
........44......
.........44.....
..........44....
...........444..
...........4.4..
...........4.4..`],
  [ box, bitmap`
................
................
................
...88888888888..
...8....8....8..
...8....8....8..
...8....8....8..
...8....8....8..
...88888888888..
...8....8....8..
...8....8....8..
...8....8....8..
...8....8....8..
...88888888888..
................
................`],
  [ goal, bitmap`
................
................
................
....444444......
...44....44.....
...4......4.....
...4.......4....
...4.......4....
...4.......4....
...44......4....
....4......4....
....44....44....
.....444444.....
................
................
................`],
  [ wall, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  [wasd, bitmap`
0...0...0.......
.0.0.0.0........
..0...0.........
................
.....0000.......
....0...0.......
....0...0.......
....0...0.......
.....0000...000.
.........0.0....
......0....0....
......0.....000.
...0000........0
..0...0....0000.
..0...0.........
...000..........`],
  [use, bitmap`
0...0...........
0...0...........
0...0...........
0...0..000......
0...0.0.........
.000..0.........
......0.........
.......000......
..........0.....
..........0.....
..........0.....
.......000..000.
...........0...0
...........0000.
...........0....
............000.`],
  [to, bitmap`
................
................
................
................
...0......0000..
...0.....0....0.
...0.....0....0.
...0.....0....0.
.00000...0....0.
...0......0000..
...0............
...0............
...0............
................
................
................
................`],
  [move, bitmap`
....0.......0...
...0.0.....0.0..
..0...0...0...0.
.0.....0.0.....0
........0.......
..0000..........
.0....0.0.....0.
.0....0..0...0..
.0....0...0.0...
.0....0....0....
..0000..........
.........00000..
.........0......
.........00000..
.........0......
.........00000..`],
  [push, bitmap`
................
...000..........
..0...0..0..0...
..0...0..0..0...
..0...0..0..0...
..0000....00....
..0.............
..0...000.......
.....0.....0....
.....0.....0....
.....0.....0....
......000..0....
.........0.0000.
.........0.0...0
.........0.0...0
......000..0...0`],
  [into, bitmap`
................
..0.............
................
..0.........0...
..0.........0...
..0..0000..000..
..0..0...0..0...
..0..0...0..0...
..0..0...0..0...
................
......0000......
.....0....0.....
.....0....0.....
.....0....0.....
.....0....0.....
......0000......`],
  [but, bitmap`
..0.............
..0.............
..0.............
..0000..........
..0...0.........
..0...0.........
..0...0.0...0...
...000..0...0...
........0...0...
........0...0...
.........000..0.
..............0.
.............000
..............0.
..............0.
..............0.`],
  [dont, bitmap`
....0...........
....0..000......
.0000.0...0.....
0...0.0...0.....
0...0.0...0.....
0...0..000......
.000............
...........0..0.
...0000...0...0.
...0...0.....000
...0...0......0.
...0...0......0.
..............0.
................
................
................`],
  [go, bitmap`
................
...000..........
..0...0.........
..0...0...0000..
..0...0..0....0.
...0000..0....0.
......0..0....0.
......0..0....0.
......0...0000..
..0...0.........
...000..........
................
................
................
................
................`],
  [over, bitmap`
................
..000...0.....0.
.0...0...0...0..
.0...0....0.0...
.0...0.....0....
..000...........
................
................
................
..000....0......
.0...0...0000...
.0000....0..0...
.0.......0......
..000....0......
................
................`],
  [your, bitmap`
................
................
..0...0..000....
...0.0..0...0...
....0...0...0...
...0....0...0...
..0......000....
................
.........0......
..0..0...0000...
..0..0...0..0...
..0..0...0......
...00....0......
................
................
................`],
  [limit, bitmap`
.....0..........
.0..............
.0...0..........
.0...0..........
.0...0...0...0..
.0...0..0.0.0.0.
.00..0.0...0...0
................
.0.....0...0....
.......0...0....
.0.....0...0....
.0....000..0....
.0.....0...0....
.0.....0........
.0.....0...0....
................`],
  [j, bitmap`
................
................
........0.......
................
........0.......
........0.......
........0.......
........0.......
........0.......
....0...0.......
.....000........
................
................
................
................
................`],
  [resta, bitmap`
................
..0.............
..000...000.....
..0..0.0...0....
..0....0000.....
..0....0........
..0.....000.....
................
..000...0...0000
.0......0..0...0
.0.....000.0...0
.0......0..0...0
..000...0...0000
.....0..0.......
.....0..........
..000...........`],
  [rt, bitmap`
................
................
................
................
................
................
................
................
.0......0.......
.000....0.......
.0..0..000......
.0......0.......
.0......0.......
.0......0.......
................
................`],
  [movableblock, bitmap`
.0.0....6...00..
0.0.0..666.0..0.
......6.6.60..0.
.....6..6..600..
...6....6.......
..6.....6....6..
.6......6.....6.
6666666666666666
.6......6.....6.
..6.....6....6..
...6....6...600.
........6...0...
.....6..6..6000.
.0...06.6.6.0...
..0.0..666..000.
...0....6.......`]
);

let level = 0; // This tracks the current level
const levels = [
  // Levels array content - each map is an element in this array
  map`
w.u.z.t.m.w
w.........w
w....p....w
w.q.b.i.g.w
.u.j.t.rs..
c.d.h.o.y.l`,
  map`
p.wg
.b..
....
..w.`,
  map`
..p.......
w.www.ww.w
w...w.bw.w
w.w.w.ww..
w.w.www...
......w.b.
..gw.....w
w.w.....ww`,
  map`
...
.p.
...`,
  map`
p.w.
.bwg
....
..bg`,
  map`
wwww..
..b...
.wwww.
p.....
......
....wg`,
  map`
p....wwwg
.b...w.g.
ww...w.vb
gb...w.b.
...ww.w..
..v.g....
.w.......`,
  map`
pwgbg..b.
.wgg.....
..bb.....
....wwwww`,
  map`
p..gg..
.v.ww.v
.......
...bb..
.......`,
];

// Set the map displayed to the current level
let currentMap = levels[level]; 
setMap(currentMap);

setSolids([ player, box, wall, movableblock ]); 

// Allow certain sprites to push certain other sprites
setPushables( {
  [player]: [box, movableblock],
  [box]: [box]
});


let isGameOver = false; // Renamed from checkgameOver for clarity

function gameOver() {
  addText("You lost!", { y: 1, color: color`3` });
  isGameOver = true;
}

onInput("a", () => {
  if (isGameOver) return; 
  updateMoves();
  getFirst(player).x += -1;
  playTune(melody);
  playback.end();
});

onInput("s", () => {
  if (isGameOver) return;
  updateMoves();
  getFirst(player).y += 1;
  playTune(melody); 
  playback.end(); 
});

onInput("d", () => {
  if (isGameOver) return;
  updateMoves();
  getFirst(player).x += 1;
  playTune(melody); 
  playback.end();
});

onInput("w", () => {
  if (isGameOver) return;
  updateMoves();
  getFirst(player).y += -1;
  playTune(melody);
  playback.end();
});

// Reset level on 'j' input
onInput("j", () => {
  if (isGameOver) return; // Prevent reset if game is over
  const resetMap = levels[level]; 
  if (resetMap !== undefined) {
    clearText("");
    setMap(resetMap);
    moves = 60; 
    addText("moves: " + moves, { y: 4, color: color`L` }); 
  }
});

let moves = 60;

const updateMoves = () => {
  moves = moves - 1;
  clearText();
  addText("moves: " + moves, { y: 4, color: color`L` });

  if (moves <= 0) {
    gameOver();
  }
};

afterInput(() => {
  
  if (isGameOver) return;
  checkWinCondition();
});

function checkWinCondition() {
  const targetNumber = getAll(goal).length;
  const numberCovered = tilesWith(goal, box).length;

  if (numberCovered === targetNumber) {
    level = level + 1; 
    const nextLevelMap = levels[level]; 

    if (nextLevelMap !== undefined) {
      setMap(nextLevelMap); 
      moves = 60;
      addText("Level " + (level + 1) + "!", { y: 4, color: color`4` }); 
      setTimeout(() => clearText(), 2000);
    } else {
      addText("You win!", { y: 4, color: color`4` });
      playTune(win)
      isGameOver = true; 
    }
  }
} 
