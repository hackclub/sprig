/*
@title: CHIP-8
@author: Milk_Cool
@tags: []
@addedOn: 2025-00-00
*/

// https://github.com/skni-kod/chip-8/blob/main/src/main/java/chip8/Memory.java
const HEX_SPRITES = [
  // 0
  0b11110000,
  0b10010000,
  0b10010000,
  0b10010000,
  0b11110000,
  // 1
  0b00100000,
  0b01100000,
  0b00100000,
  0b00100000,
  0b01110000,
  // 2
  0b11110000,
  0b00010000,
  0b11110000,
  0b10000000,
  0b11110000,
  // 3
  0b11110000,
  0b00010000,
  0b11110000,
  0b00010000,
  0b11110000,
  // 4
  0b10010000,
  0b10010000,
  0b11110000,
  0b00010000,
  0b00010000,
  // 5
  0b11110000,
  0b10000000,
  0b11110000,
  0b00010000,
  0b11110000,
  // 6
  0b11110000,
  0b10000000,
  0b11110000,
  0b10010000,
  0b11110000,
  // 7
  0b11110000,
  0b00010000,
  0b00100000,
  0b01000000,
  0b01000000,
  // 8
  0b11110000,
  0b10010000,
  0b11110000,
  0b10010000,
  0b11110000,
  // 9
  0b11110000,
  0b10010000,
  0b11110000,
  0b00010000,
  0b11110000,
  // A
  0b11110000,
  0b10010000,
  0b11110000,
  0b10010000,
  0b10010000,
  // B
  0b11100000,
  0b10010000,
  0b11100000,
  0b10010000,
  0b11100000,
  // C
  0b11110000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b11110000,
  // D
  0b11100000,
  0b10010000,
  0b10010000,
  0b10010000,
  0b11100000,
  // E
  0b11110000,
  0b10000000,
  0b11110000,
  0b10000000,
  0b11110000,
  // F
  0b11110000,
  0b10000000,
  0b11110000,
  0b10000000,
  0b10000000
];
const ROMS = [
  // Snek https://johnearnest.github.io/chip8Archive/play.html?p=snek
  "A238F76500E0FF073F001206F315E4A16200E5A16201E6A16202E7A1620342007001420171FF420270FF42037101D0114F001206FF0A1200201000010905070880",
  // Slippery Slope https://johnearnest.github.io/chip8Archive/play.html?p=slipperyslope

  // Cave explorer https://johnearnest.github.io/chip8Archive/play.html?p=caveexplorer

  // Spock Paper Scissors https://johnearnest.github.io/chip8Archive/play.html?p=spockpaperscissors

];

const INTERVAL_TIME = 5;
const TICKS_PER_TIME = 10;
const KB_DOWN = 30; // For how many cycles we should hold the keys

const screenParts = "01234567";
const emptyBitmap = () => {
  return ("\n" + "0".repeat(16)).repeat(16);
};
let screen;
const clearScreen = () => screen = screenParts.split("").map(x => [x, emptyBitmap()]);
clearScreen();
const flipPixel = (x, y) => {
  x %= 64;
  y %= 32;
  const index = Math.floor(x / 16) + (y >= 16 ? 4 : 0);
  const indexInner = (y & 0xf) * 17 + (x & 0xf) + 1;
  const current = screen[index][1]; // string
  const ret = current[indexInner] === "9";
  screen[index][1] = current.slice(0, indexInner) + (ret ? "0" : "9") + current.slice(indexInner + 1);
  return ret;
};

const render = () => setLegend(...screen);
render();

const screenMap = map`0123
4567`;

const kbMap = map`123c
456d
789e
a0bf`;
let kbOn = false;
let kbN = 5;
const getKbSprite = n => {
  let digit = HEX_SPRITES.slice(n * 5, (n + 1) * 5).map(x => "0".repeat(6) + x.toString(2).padStart(8, "0").replaceAll("1", "9") + "0".repeat(2));
  digit = new Array(5).fill("0".repeat(16))
    .concat(digit)
    .concat(new Array(3).fill("0".repeat(16)))
    .concat(["0".repeat(4) + (n === kbN ? "9" : "0").repeat(8) + "0".repeat(4)])
    .concat(new Array(2).fill("0".repeat(16)));
  if(ctx.kb[n] > 0) {
    digit[0] = "9".repeat(16);
    digit[15] = "9".repeat(16);
    for(let i = 0; i < 16; i++) {
      digit[i] = "9" + digit[i].slice(1, 15) + "9";
    }
  }
  return "\n" + digit.join("\n");
};
const renderKeyboard = () => {
  setLegend(
    ...new Array(16).fill(0).map((x, i) => [i.toString(16), getKbSprite(i)])
  );
};
const moveKb = (xp, yp) => {
  const kb = kbMap.split("\n");
  let x, y;
  for(x = 0; x < 4; x++) {
    let flag = false;
    for(y = 0; y < 4; y++) 
      if(kb[y][x].toLowerCase() === kbN.toString(16).toLowerCase()) {
        flag = true;
        break;
      }
    if(flag) break;
  }
  
  x += xp;
  y += yp;
  while(x < 0) x += 4;
  while(y < 0) y += 4;
  x &= 0b11;
  y &= 0b11;

  kbN = parseInt(kb[y][x], 16);
  renderKeyboard();
};

const toggleKeyboard = () => {
  kbOn = !kbOn;
  if(kbOn) setMap(kbMap);
  else setMap(screenMap);
};

let interval = null;
let timerInterval = null;

const norm8b = n => {
  while(n < 0) n += 0x100;
  return n & 0xff;
}
const norm12b = n => {
  while(n < 0) n += 0x1000;
  return n & 0xfff;
}

const ctx = {
  pc: 0x200,
  reg: new Array(16).fill(0),
  kb: new Array(16).fill(0),
  i: 0x000,
  ram: [],
  stack: [],
  delay: 0,
  sound: 0
};
const init = romIndex => {
  ctx.pc = 0x200;
  ctx.reg = new Array(16).fill(0);
  ctx.i = 0x000;
  ctx.ram = [...HEX_SPRITES].concat(new Array(0x1000 - HEX_SPRITES.length).fill(0));
  ctx.kb = new Array(16).fill(0);
  for(let i = 0; i < ROMS[romIndex].length; i += 2)
    ctx.ram[0x200 + i / 2] = parseInt(ROMS[romIndex].slice(i, i + 2), 16);
  ctx.stack = [];
  
  clearScreen();

  ctx.delay = 0;
  ctx.sound = 0;

  if(interval !== null) clearInterval(interval);
  interval = setInterval(() => {
    for(let i = 0; i < TICKS_PER_TIME; i++)
      tick();
  }, INTERVAL_TIME);
  if(timerInterval !== null) clearInterval(timerInterval);
  timerInterval = setInterval(timerTick, 1000 / 60);
};

const tick = () => {
  if(kbOn) return;
  
  const inst = ctx.ram.slice(ctx.pc, ctx.pc + 2);
  const parts = [inst[0] >> 4, inst[0] & 0xf, inst[1] >> 4, inst[1] & 0xf];
  const addr = (parts[1] << 8) | inst[1];
  let add2 = true;
  
  if(inst[0] === 0x00 && inst[1] === 0xe0) {
    clearScreen();
    render();
  } else if(inst[0] === 0x00 && inst[1] === 0xee)
    ctx.pc = ctx.stack.pop();
  else if(parts[0] === 0x1) {
    ctx.pc = addr;
    add2 = false;
  } else if(parts[0] === 0x2) {
    ctx.stack.push(ctx.pc);
    ctx.pc = addr;
    add2 = false;
  } else if(parts[0] === 0x3) {
    if(ctx.reg[parts[1]] == inst[1])
      ctx.pc += 2;
  } else if(parts[0] === 0x4) {
    if(ctx.reg[parts[1]] != inst[1])
      ctx.pc += 2;
  } else if(parts[0] === 0x5) {
    if(ctx.reg[parts[1]] == ctx.reg[parts[2]])
      ctx.pc += 2;
  } else if(parts[0] === 0x6) 
    ctx.reg[parts[1]] = inst[1];
  else if(parts[0] === 0x7) 
    ctx.reg[parts[1]] += inst[1];
  else if(parts[0] === 0x8 && parts[3] == 0x0) 
    ctx.reg[parts[1]] = ctx.reg[parts[2]];
  else if(parts[0] === 0x8 && parts[3] == 0x1) {
    ctx.reg[parts[1]] |= ctx.reg[parts[2]];
    ctx.reg[0xf] = 0;
  } else if(parts[0] === 0x8 && parts[3] == 0x2) {
    ctx.reg[0xf] = 0;
    ctx.reg[parts[1]] &= ctx.reg[parts[2]];
  } else if(parts[0] === 0x8 && parts[3] == 0x3) {
    ctx.reg[parts[1]] ^= ctx.reg[parts[2]];
    ctx.reg[0xf] = 0;
  } else if(parts[0] === 0x8 && parts[3] == 0x4) {
    const res = ctx.reg[parts[1]] + ctx.reg[parts[2]];
    ctx.reg[parts[1]] = res;
    ctx.reg[0xf] = res > 0xff ? 1 : 0;
  } else if(parts[0] === 0x8 && parts[3] == 0x5) {
    const tmp = ctx.reg[parts[1]] >= ctx.reg[parts[2]] ? 1 : 0;
    ctx.reg[parts[1]] -= ctx.reg[parts[2]];
    ctx.reg[0xf] = tmp;
  } else if(parts[0] === 0x8 && parts[3] == 0x6) {
    const res = ctx.reg[parts[2]] >> 1;
    const tmp = ctx.reg[parts[2]] & 0x1
    ctx.reg[parts[1]] = res;
    ctx.reg[0xf] = tmp;
  } else if(parts[0] === 0x8 && parts[3] == 0x7) {
    const tmp = ctx.reg[parts[2]] >= ctx.reg[parts[1]] ? 1 : 0;
    ctx.reg[parts[1]] = ctx.reg[parts[2]] - ctx.reg[parts[1]];
    ctx.reg[0xf] = tmp;
  } else if(parts[0] === 0x8 && parts[3] == 0xe) {
    const res = ctx.reg[parts[2]] << 1;
    const tmp = (ctx.reg[parts[2]] >> 7) & 0x1;
    ctx.reg[parts[1]] = res;
    ctx.reg[0xf] = tmp;
  } else if(parts[0] === 0x9) {
    if(ctx.reg[parts[1]] != ctx.reg[parts[2]])
      ctx.pc += 2;
  } else if(parts[0] === 0xa)
    ctx.i = addr;
  else if(parts[0] === 0xb)
    ctx.pc = addr + ctx.reg[0x0];
  else if(parts[0] === 0xc)
    ctx.reg[parts[1]] = Math.floor(Math.random() * 256) & inst[1];
  else if(parts[0] === 0xd) {
    let collision = false;
    for(let y = 0; y < parts[3]; y++)
      for(let x = 0; x < 8; x++)
        if((ctx.ram[ctx.i + y] >> (7 - x)) & 1)
          collision = flipPixel(x + ctx.reg[parts[1]], y + ctx.reg[parts[2]]) || collision; // ||= does NOT WORK
    ctx.reg[0xf] = collision ? 1 : 0;
    render();
  } else if(parts[0] === 0xe && inst[1] === 0x9e) {
    if(ctx.kb[ctx.reg[parts[1]]] > 0)
      ctx.pc += 2
  } else if(parts[0] === 0xe && inst[1] === 0xa1) {
    if(!ctx.kb[ctx.reg[parts[1]]] > 0)
      ctx.pc += 2
  } else if(parts[0] === 0xf && inst[1] === 0x07) {
    ctx.reg[parts[1]] = ctx.delay;
  } else if(parts[0] === 0xf && inst[1] === 0x0a) {
    const key = ctx.kb.findIndex(x => x > 0);
    if(key === -1) add2 = false;
    else ctx.reg[parts[1]] = key;
  } else if(parts[0] === 0xf && inst[1] === 0x15)
    ctx.delay = ctx.reg[parts[1]];
  else if(parts[0] === 0xf && inst[1] === 0x18)
    ctx.sound = ctx.reg[parts[1]];
  else if(parts[0] === 0xf && inst[1] === 0x1e)
    ctx.i += ctx.reg[parts[1]];
  else if(parts[0] === 0xf && inst[1] === 0x29)
    ctx.i = (ctx.reg[parts[1]] & 0xf) * 5;
  else if(parts[0] === 0xf && inst[1] === 0x33) {
    ctx.ram[ctx.i] = Math.floor(ctx.reg[parts[1]] / 100);
    ctx.ram[ctx.i + 1] = Math.floor(ctx.reg[parts[1]] / 10) % 10;
    ctx.ram[ctx.i + 2] = Math.floor(ctx.reg[parts[1]]) % 10;
  } else if(parts[0] === 0xf && inst[1] === 0x55) {
    for(let i = 0; i <= parts[1]; i++) {
      ctx.ram[ctx.i] = ctx.reg[i];
      ctx.i++
    }
  } else if(parts[0] === 0xf && inst[1] === 0x65) {
    for(let i = 0; i <= parts[1]; i++) {
      ctx.reg[i] = ctx.ram[ctx.i];
      ctx.i++;
    }
  }
  
  if(add2) ctx.pc += 2;
  ctx.kb = ctx.kb.map(x => x > 0 ? x - 1 : x);
  ctx.reg = ctx.reg.map(norm8b);
  ctx.ram = ctx.ram.map(norm8b);
  ctx.i = norm12b(ctx.i);
};

const timerTick = () => {
  if(ctx.delay > 0) ctx.delay--;
  if(ctx.sound > 0) {
    playTune(tune`
37.5: C5~37.5,
1162.5`);
    ctx.sound--;
  }
}

let currentGame = 0;

onInput("w", () => {
  if(kbOn) moveKb(0, -1);
  else ctx.kb[5] = KB_DOWN;
});
onInput("a", () => {
  if(kbOn) moveKb(-1, 0);
  else ctx.kb[7] = KB_DOWN;
});
onInput("s", () => {
  if(kbOn) moveKb(0, 1);
  else ctx.kb[8] = KB_DOWN;
});
onInput("d", () => {
  if(kbOn) moveKb(1, 0);
  else ctx.kb[9] = KB_DOWN;
});
onInput("k", () => {
  if(!kbOn) ctx.kb[4] = KB_DOWN;
});
onInput("l", () => {
  if(kbOn) {
    ctx.kb[kbN] = ctx.kb[kbN] > 0 ? 0 : KB_DOWN;
    renderKeyboard();
  } else ctx.kb[6] = KB_DOWN;
});
onInput("i", () => {
  kbOn ? render() : renderKeyboard();
  toggleKeyboard();
});
onInput("j", () => {
  currentGame++;
  currentGame %= ROMS.length;
  init(currentGame);
});
setMap(screenMap);
init(0);