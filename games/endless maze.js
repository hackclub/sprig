// SPRITES
const player = "p";
const wall = "w";
const target = "t";

setLegend(
  [ player, bitmap`
HHH555577DD44666
HH555577DD446669
H555577DD4466699
H55577DD44666699
55777DDD44666999
5577DDD446669993
577DDD4466699933
77DD444666999333
7DD4446669993333
DD44466999933333
D444669444355333
4466669434353533
4666999433353533
6669999444353533
6999933334353533
9999333444355333` ],
  [ wall, bitmap`
0000005500000000
7000052507700500
0700500570077500
5575555755575755
0557005700270505
0507007005070555
0000775005070500
5200705050075500
0557075505570770
0075557005777500
0700057057770050
7000505777700050
7000550075700050
0000500070720050
0205020007705005
0050000007700555` ],
  [ target, bitmap`
44844HHHHHHHH444
484HH8444444H444
8HHH4844848H4444
H48H888878H848H4
88H848448H888844
44H88848H4888844
44H8884H44848HH4
44H8844H448HH844
8H8748H844H44784
4H4448H8HH484884
4H444HHH48484888
8H444HHHH8484888
H884H4488HH84888
H447844847888884
H8H4484848448884
HH48444448448844` ]
);

setSolids([wall, player]);

// AUDIO
const keyInput = tune`
122.44897959183673: D4~122.44897959183673,
3795.918367346939`;
const winSound = tune`
74.81296758104739: E4~74.81296758104739 + F4^74.81296758104739,
74.81296758104739: E4~74.81296758104739 + F4^74.81296758104739,
74.81296758104739: E4~74.81296758104739 + F4^74.81296758104739,
74.81296758104739: E4~74.81296758104739 + G4^74.81296758104739,
74.81296758104739: E4~74.81296758104739 + G4^74.81296758104739,
74.81296758104739: E4~74.81296758104739 + G4^74.81296758104739,
74.81296758104739: F4~74.81296758104739 + E4~74.81296758104739 + G4^74.81296758104739 + A4^74.81296758104739,
74.81296758104739: F4~74.81296758104739 + A4^74.81296758104739,
74.81296758104739: F4~74.81296758104739 + G4~74.81296758104739 + A4^74.81296758104739 + B4^74.81296758104739,
74.81296758104739: G4~74.81296758104739 + B4^74.81296758104739,
74.81296758104739: G4~74.81296758104739 + A4~74.81296758104739 + B4^74.81296758104739 + C5^74.81296758104739,
74.81296758104739: A4~74.81296758104739 + C5^74.81296758104739 + D5^74.81296758104739,
74.81296758104739: A4~74.81296758104739 + B4~74.81296758104739 + D5^74.81296758104739,
74.81296758104739: B4~74.81296758104739 + C5~74.81296758104739 + E5^74.81296758104739,
74.81296758104739: C5~74.81296758104739 + F5^74.81296758104739,
74.81296758104739: D5~74.81296758104739 + E5~74.81296758104739 + C5~74.81296758104739 + G5^74.81296758104739,
74.81296758104739: E5~74.81296758104739 + F5~74.81296758104739 + G5~74.81296758104739 + A5^74.81296758104739,
1122.1945137157109`;

// MAP
const levels = [map`
wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
wp..........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
w...........................................................w
wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww`];

setMap(levels[0]);

// Maze Generation
function generateMaze() {
  let maze = Array(height()).fill(null).map(() => Array(width()));

  function findUnvisitedNeighbours(position, maze, height, width) {
    const dirs = [[0,2],[0,-2],[2,0],[-2,0]];
    return dirs
      .map(([dr,dc]) => [position[0]+dr, position[1]+dc])
      .filter(([r,c]) =>
        r > 0 && r < height-1 &&
        c > 0 && c < width-1 &&
        maze[r][c] === 'w'
      );
  }

  // Fill with walls, mark start
  for (let i=0; i<height(); i++) {
    for (let j=0; j<width(); j++) {
      maze[i][j] = (i==1 && j==1) ? '.' : 'w';
    }
  }

  let cells = [[1,1]];
  while (cells.length > 0) {
    let current = cells.pop();
    let neighbours = findUnvisitedNeighbours(current, maze, height(), width());
    if (neighbours.length > 0) {
      cells.push(current);
      let chosen = neighbours[Math.floor(Math.random()*neighbours.length)];
      // carve wall
      maze[(current[0]+chosen[0]) / 2][(current[1]+chosen[1]) / 2] = '.';
      maze[chosen[0]][chosen[1]] = '.';
      cells.push(chosen);
    }
  }

  // Place target and player
  maze[height()-2][width()-2] = 't';
  maze[1][1] = 'p';

  let generated_maze = '';
  for (let i=0; i<height(); i++) {
    generated_maze += maze[i].join('') + '\n';
  }

  setMap(generated_maze);
}

addText("maze game\n press j\n to make a\n new maze", {
  x: 1,
  y: 4,
  color: color`3`
});

// USER INPUT
onInput("s", () => { getFirst(player).y += 1; playTune(keyInput); });
onInput("w", () => { getFirst(player).y -= 1; playTune(keyInput); });
onInput("a", () => { getFirst(player).x -= 1; playTune(keyInput); });
onInput("d", () => { getFirst(player).x += 1; playTune(keyInput); });
onInput("j", () => { clearText(); generateMaze(); });

afterInput(() => {
  if (tilesWith(player, target).length > 0) {
    addText("you win!\npress j\nto start\na new round", {x: 5, y: 4, color: color`3`});
    playTune(winSound);
  }
});
