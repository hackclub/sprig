/*
@title: Sprigade
@author: Pjanda
@tags: [Platformer]
@addedOn: 2025-04-08
*/

const player = "p"
const floor = "g"
const floorleft = "l"
const floorright = "r"
const wallleft = "q"
const wallright = "w"
const flag = "f"
const bg = "b"

// logo
const tile1 = "1"
const tile2 = "2"
const tile3 = "3"
const tile4 = "4"
const tile5 = "5"
const tile6 = "6"

setLegend(
  [ player, bitmap`
................
................
..222222222222..
..222222222222..
..22..2222..22..
..22..2222..22..
..222222222222..
..222222222222..
....22222222....
....22222222....
22............22
22............22
22..22222222..22
22..22222222..22
....22....22....
....22....22....`],
  [ floor, bitmap`
2222222222222222
2222222222222222
................
................
................
................
................
................
................
................
................
................
................
................
................
................`],
  [ floorleft, bitmap`
2222222222222222
2222222222222222
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............`],
  [ floorright, bitmap`
2222222222222222
2222222222222222
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22`],
  [ wallleft, bitmap`
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............
22..............`],
  [ wallright, bitmap`
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22
..............22`],
  [ flag, bitmap`
22..2222........
22..2222........
22..2222..222222
22..2222..222222
22..2222..2222..
22..2222..2222..
22..2222..22....
22..2222..22....
22..2222..2222..
22..2222..2222..
22........222222
22........222222
22..............
22..............
22..............
22..............`],
  [ bg, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],

  [ tile1, bitmap`
..222222........
..222222........
22....22........
22....22........
22..........2222
22..........2222
..2222....2222..
..2222....2222..
......22....22..
......22....22..
22....22....22..
22....22....22..
222222......2222
222222......2222
............22..
............22..`],
  [ tile2, bitmap`
................
................
................
................
22....22..2222..
22....22..2222..
..22....22......
..22....22......
..22....22......
..22....22......
..22....22......
..22....22......
22....222222....
22....222222....
................
................`],
  [ tile3, bitmap`
..22............
..22............
..............22
..............22
..22......2222..
..22......2222..
2222....22....22
2222....22....22
..22....22....22
..22....22....22
..22......2222..
..22......2222..
222222..22222222
222222..22222222
........22......
........22......`],
  [ tile4, bitmap`
................
................
................
................
....2222......22
....2222......22
..22....22..22..
..22....22..22..
....222222..22..
....222222..22..
..22....22..22..
..22....22..22..
....222222....22
....222222....22
22..............
22..............`],
  [ tile5, bitmap`
2222............
2222............
..22............
..22............
2222......2222..
2222......2222..
..22....22....22
..22....22....22
..22....22222222
..22....22222222
..2222..22......
..2222..22......
2222......2222..
2222......2222..
................
................`],
  [ tile6, bitmap`
..........222222
..........222222
................
................
................
................
................
................
................
................
................
................
................
................
................
................`],
)

// background color
setBackground(bg)

// stuff for the map
let level = 0;
const levels = [
  map`
.........
.........
..12345..
..6.6....
.........
.........
.p.....f.
ggggggggg`,
  
  map`
..........
..........
..........
..........
..........
........f.
.p...lgggg
ggggg.....`,
  map`
..........
..........
..........
........f.
.......lgg
.....lg...
.p.lg.....
ggg.......`,
  map`
..........
.p........
ggr.......
...ggggg..
..........
..........
.f....lggg
gggggg....`,
  map`
..........
..........
..........
.....lr...
.....qw...
...lg.w...
.p.q..w.f.
ggg....ggg`,
  map`
..........
.p..lgg...
ggg.q.....
....q..lgg
.f..q..q..
ggg.q.l...
......q...
gggggg....`,
  map`
..........
........f.
.......lgg
......l...
.....l....
....l.....
.p.l......
ggg.......`,
  map`
.....qw...
.....qw.p.
.....qw...
.....qw...
.....qw...
..lr......
f.qw......
gggggggggg`,
  map`
....w.....
....w.p...
....wgggg.
....w.....
.f........
ggr...lggg
..w...q...
...ggg....`,

  map`
..........
..........
..........
..........
..........
..........
.p......f.
gggggggggg`,
]

setMap(levels[level])

// collisions
setSolids([ player, floor, floorleft, floorright, wallleft, wallright])

// jumping variables
let isJumping = false;
let canJump = true;

// walking variables
let canMove = true;

// checking if the player is on theground
const isOnGround = () => {
    const playerSprite = getFirst(player);
    const allFloorTiles = getAll(floor).concat(getAll(floorleft));
    return allFloorTiles.some(f => playerSprite.x === f.x && playerSprite.y === f.y - 1);
};

// checking for gravity
setInterval(() => {
    if (!isJumping) {
        getFirst(player).y += 1;
    }
}, 50);

// jumping function
const jump = () => {
    if (!isJumping && isOnGround()) {
        isJumping = true;
        getFirst(player).y -= 1;
        setTimeout(() => {
            getFirst(player).y -= 1;
            setTimeout(() => {
                getFirst(player).y -= 1;
                isJumping = false;
            }, 100);
        }, 50);
    }
};

// controls
onInput("d", () => {
  if (canMove) {
    canMove = false;
    getFirst(player).x += 1;
    setTimeout(() => {
      canMove = true;
    }, 50);
  }
})

onInput("a", () => {
  if (canMove) {
    canMove = false;
    getFirst(player).x -= 1;
    setTimeout(() => {
      canMove = true;
    }, 50);
  }
})

onInput("k", jump);

// reset button
onInput("i", () => {
  level = 0;
  setMap(levels[level]);
});

// Collision between player and flag
const checkCollisions = () => {
    const playerSprite = getFirst(player);
    const flagSprite = getFirst(flag);

    if (playerSprite.x === flagSprite.x && playerSprite.y === flagSprite.y) {
        level = (level + 1) % levels.length;

        // Clear all existing text before setting the new level
        clearText();

        setMap(levels[level]);
        // text for a specific level
        addText(`Level ${level + 1}`, {
            x: 1,
            y: 1,
            color: color`w`
        });
    }
};

// Check if the player is touching the flag
setInterval(() => {
    checkCollisions();
}, 100);

// text for level 1
addText(`Level ${level + 1}`, {
    x: 1,
    y: 1,
    color: color`w`
});

addText("a+d to move", {
    x: 4,
    y: 7,
    color: color`1`
});

addText("k to jump", {
    x: 4,
    y: 8,
    color: color`1`
});



// check for win text
function checkWinCondition() {
  if (level === levels.length - 1) {
    addText("you win!!", {
      x: 6,
      y: 5,
      color: color`2`
    });
  }
}

const winCheckInterval = setInterval(checkWinCondition, 100);