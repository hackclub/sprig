
/* 
@title: Ophelia's Fairy Dust
@description: A simple template to help you get started with making a maze game.
@author: Olyviah Pinney
@tags: []
@addedOn: 2023-08-08
*/

//all sprites; including floor, walls, and characters
const player = "p"
const goblin = "r"
const frog = "u"
const midWall = "a"
const upDownWall = "b"
const LRWall = "c"
const RWall = "d"
const RUWall = "m"
const LWall = "e"
const LUWall = "n"
const TWall = "f"
const TUWall = "o"
const TRWall = "k"
const TLWall = "l"
const BWall = "h"
const BUWall = "q"
const BRWall = "i"
const BLWall = "j"
const floor = "s"
const goal = "g"
const portalENT = "x"
const portalEXT = "y"
const bush = "z"

//all bitmaps
setLegend (
  [ player, bitmap`
................
.......00.......
......0000......
......6666......
777...0660...777
7447..6666..7447
744477.66.7744H7
.444468888644H..
...446888864H...
....64888846....
.....888888.....
.....888888.....
....88888888....
...8888888888...
......6..6......
.....HH.HH......` ],
  [goblin, bitmap `
...55.......55..
...55.......55..
....7.......7...
....77.....77...
.....7077707....
.....7707077....
..7777227227777.
...75720702757..
...75777777757..
....777707777...
.....770707.....
....77777777....
...77..77..77...
..77..7777..77..
..7...7..7...7..
..7..77..77..7..`],
  [frog, bitmap `
................
................
................
....444..444....
....404..404....
....44444444....
....44444444....
....44888844....
....44443444....
....44444444....
....44444444....
....4.4..4.4....
....44444444....
....4.4..4.4....
...444....444...
....4......4....`],
  [midWall, bitmap`
1111101111101111
1111101111101111
1111101111101111
1111100000001111
1111111011100111
0011100001100000
1100001101101111
1110111101101111
1110111000000011
1111000011011011
1111011111011001
0000011111000100
1110011100001111
1111100000101111
1111101110001111
1111101111101111`],
  [upDownWall,bitmap`
0111101111101110
0111101111101110
0111101111101110
0111100000001110
0011111011100110
0011100001100000
0100001101101110
0110111101101110
0110111000000010
0111000011011010
0111011111011000
0000011111000100
0110011100001110
0111100000101110
0111101110001110
0111101111101110`],
  [LRWall,bitmap`
0000000000000000
1111011111001111
1111011110111111
1110011000111111
1110000110111111
0001110110010000
1101110111010111
1101110011000111
1100111000010111
1000111011110111
1010000011110111
0000011000000000
1111011011001111
1111100011011111
1111001111011111
0000000000000000`],
  [RWall, bitmap`
0111101111101111
0111101111101111
0111101111101111
0111100000001111
0011111011100111
0011100001100000
0100001101101111
0110111101101111
0110111000000011
0111000011011011
0111011111011001
0000011111000100
0110011100001111
0111100000101111
0111101110001111
0111101111101111`],
  [RUWall, bitmap`
0000000000000000
0111101111101111
0111101111101111
0111100000001111
0011111011100111
0011100001100000
0100001101101111
0110111101101111
0110111000000011
0111000011011011
0111011111011001
0000011111000100
0110011100001111
0111100000101111
0111101110001111
0000000000000000`],
  [LWall, bitmap`
1111011111011110
1111011111011110
1111011111011110
1111000000011110
1110011101111100
0000011000011100
1111011011000010
1111011011110110
1100000001110110
1101101100001110
1001101111101110
0010001111100000
1111000011100110
1111010000011110
1111000111011110
1111011111011110`],
  [LUWall, bitmap`
0000000000000000
1111011111011110
1111011111011110
1111000000011110
1110011101111100
0000011000011100
1111011011000010
1111011011110110
1100000001110110
1101101100001110
1001101111101110
0010001111100000
1111000011100110
1111010000011110
1111000111011110
0000000000000000`],
  [BWall, bitmap`
0000000000000000
1111101111101111
1111101111101111
1111100000001111
1011111011100111
0011100001100000
1100001101101111
1110111101101111
1110111000000011
1111000011011011
1111011111011001
0000011111000100
1110011100011111
1111100000111111
1111101110011111
1111001111101111`],
  [BUWall, bitmap`
0000000000000000
0111101111101110
0111101111101110
0111100000001110
0011111011100110
0011100001100000
0100001101101110
0110111101101110
0110111000000010
0111000011011010
0111011111011000
0000011111000100
0110011100011110
0111100000111110
0111101110011110
0111001111101110`],
  [BRWall, bitmap`
0000000000000000
0111101111101111
0111101111101111
0111100000001111
0011111011100111
0011100001100000
0100001101101111
0110111101101111
0110111000000011
0111000011011011
0111011111011000
0000011111000101
0110011100011111
0111100000111111
0111101110011111
0111001111101111`],
  [BLWall, bitmap`
0000000000000000
1111101111101110
1111101111101110
1111100000001110
1011111011100110
0011100001100000
1100001101101110
1110111101101110
1110111000000010
1111000011011010
1111011111011000
0000011111000100
1110011100011110
1111100000111110
1111101110011110
1111001111101110`],
  [TWall, bitmap`
1111101111101111
1111101111101111
1111101111101111
1111100000001111
1011111011100111
0011100001100000
1100001101101111
1110111101101111
1110111000000011
1111000011011011
1111011111011001
0000011111000100
1110011100011111
1111100000111111
1111101110011111
0000000000000000`],
  [TUWall, bitmap`
0111101111101110
0111101111101110
0111101111101110
0111100000001110
0011111011100110
0011100001100000
0100001101101110
0110111101101110
0110111000000010
0111000011011010
0111011111011000
0000011111000100
0110011100011110
0111100000111110
0111101110011110
0000000000000000`],
  [TLWall, bitmap`
1111101111101110
1111101111101110
1111101111101110
1111100000001110
1011111011100110
0011100001100000
1100001101101110
1110111101101110
1110111000000010
1111000011011010
1111011111011000
0000011111000100
1110011100011110
1111100000111110
1111101110011110
0000000000000000`],
  [TRWall, bitmap`
0111101111101111
0111101111101111
0111101111101111
0111100000001111
0011111011100111
0011100001100000
0100001101101111
0110111101101111
0110111000000011
0111000011011011
0111011111011001
0000011111000100
0110011100011111
0111100000111111
0111101110011111
0000000000000000`],
  [floor, bitmap `
DCDCCCCCCCDCCCCC
CCDCDCCCDCCCCCDC
DDCCCCCCCCDCCDCD
CCDCCCCCCDCCCCCC
CCCCCDCCDCCCCDCC
CCDCCCCCCCCCCCDC
CCCDCCCCCCCDCDCC
DCCCCDCCDCCCDCCC
CCCCDCCDCDCDCCCC
CCCDCCDCCCCCCCCC
CCCCCDCCDCCCCDCC
CCCCCCDCCCCCCCCC
CDCCCCCCDCCCDCDC
CCCCDCDCCDCCCCCC
CDCCCCCCCCCCCCCC
CDCCCCCCCDCCCCDC`],
  [goal, bitmap`
...6............
.....6.6...66...
................
.....66..6.6....
...6............
.......6........
.6...99999..6...
......000.......
.....99999......
....9996999.....
....9969999.....
....9999699.....
....9999999.....
.....99999......
................
................`],
  [portalENT, bitmap `
..HH............
.HH..H8888H...HH
...HH88HH8HHH..H
...H88777HHHH...
..HH8H7H8888HH..
..H887788HHHHH..
..H8H7H8H7777H..
..H8H7H8HHHH7H..
..H8H7H88HHH7H..
..H8H7HHHHH77H..
..H8877HHH77HH..
..HH8H77H77HHH..
...H8HHH77H8H...
HH.H8888888HH...
.H...HHHHHH...HH
.............H..`],
  [portalEXT, bitmap `
..HH............
.HH..HHHHHH...HH
...HHHHHHHHHH..H
...HHHHHHHHHH...
..HHHHHHHHHHHH..
..HHHHHHHHHHHH..
..HHHHHHHHHHHH..
..HHHHHHHHHHHH..
..HHHHHHHHHHHH..
..HHHHHHHHHHHH..
..HHHHHHHHHHHH..
..HHHHHHHHHHHH..
...HHHHHHHHHH...
HH.HHHHHHHHHH...
.H...HHHHHH...HH
.............H..`],
  [bush, bitmap `
................
................
........44444...
....4444444H4...
....4444444444..
..444444H444H44.
..444H4H4444444.
.44H444444H44444
.444444444444444
.4444H444H444H4.
..4444444444444.
...44444444444..
................
................
................
................`]
)

//solids, background and levels
setSolids([bush,player,frog,midWall,upDownWall,LRWall,RWall,RUWall,LWall,LUWall,BWall,BUWall,BRWall,BLWall,TWall,TUWall,TLWall,TRWall]);

setBackground("s")

let level = 0
const levels = [
  map `
afaffffaffffaffffa
epb....b....b....d
e.o..q.o.q..o...gd
e....b...b.......d
ahhhhahhhahhhhhhha`,
  map `
afffffffa
eg..zz..d
e...zz..d
e...zz.pd
ahhhhhhha`,
  map`
fffaffffa
zzgbzzzzd
y..bzzzzd
hcclzicca
ezzzzbp.d
ezzzzo..d
e.....z.d
exq...z.d
ahahhhhha`,
  map`
afafffffffffffffffa
erb..z......r..z.rd
acl..z...z........d
epz..q.r.q.....q..d
e.z..bzzzbzzzzzbg.d
ahhhhahhhahhhhhahha`,
  map`
afffffafffffffa
e...zpb...z...d
ezq..zb...q...d
e.b...bx..b.r.d
e.kcccacccl...d
e..r..b.r.z...d
e.....b...z..rd
e.r...br...icca
e....ro....by.d
e..........b.gd
ahhhhhhhhhhahha`,
  map `
affffffffffffffa
ep..b..........d
e..xb.icccccj..d
accce.b.....b..d
e.y.b.b.mcj.b..d
e...b.b..gb.d..d
e..rb.kcccl.b..d
e...b.......b..d
e.r.dcccccccb..d
e...........z..d
er..........zr.d
ahhhhhhhhhhhhhha`,
  map`
affffffffffffffffffffa
e...r.....r.....r..bgd
e.z....r.....r.....b.d
e.r.rr...r.......r.b.d
e.z.........r..r...b.d
epz....r.r.........b.d
e.z..r........rr..rb.d
e.r.....r..........b.d
e.z...r....rr...r..b.d
e.r..rr.....r.r....b.d
e.z......r.......z.b.d
e.r.r..r.....r...z...d
ahhhhhhhhhhhhhhhhhhhha`,
  map`
affaffffffffffffffa
ep.o....r.r.......d
e..z.r.r..z.r.r.r.d
acn.r....r........d
e.r..z.r..r.r.r.rrd
e..z..x..z...rz.r.d
err.r...r..r..z.ryd
e.....r..r...r..rgd
ahhhhhhhhhhhhhhhhha`,
  map `
affffffffafffffffffffffffffffaaaaaaa
e........b........r..........deg..da
e.immmmj.b..r..r....r...r....de...da
e.b....b.b.....r......r...r..daj..da
e.b.in.b.b.r.......r.........dae..da
e.b.b..b.b.......r....r....r.dal..da
e.b.br.b.b...r..........r....de...da
e.b.b..b.b......r.........r..de.r.da
e.b.b.pb.b........r..r.......de...da
e.b.kmml.b..r...........r..r.daj..da
e.b......b.........r.........dae..da
e.kmmmmmml....r......r.......daezzda
e.........z..............r...dal..da
ahhhhhhhhhhhhhhhhj...........de...da
aaaaaaaaaaaaaaaaae.r..r....r.de.y.da
afffffffffffffffae.......r...dahhhaa
e..r....r.......de...........kfffffa
ex...r.....r....de....r......z....rd
e..........r....de..r........z.r...d
e...r...........de......r..r.z..r..d
e.r..rr...r...r.kl...........z.....d
e...............z...r........z.r..rd
ahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhha`
]
setMap(levels[0])

//code for background music, movement, etc
const music = tune `
300: D5-300 + E4~300 + G5/300,
300: C5-300 + D4~300 + F5/300,
300: E5/300 + B4-300 + C4~300,
300: D5-300 + E4~300 + G5/300,
300: B4-300 + C4~300 + E5/300,
300: D5-300 + E4~300 + G5/300,
300: B4-300 + C4~300 + E5/300,
300: D5-300 + E4~300 + G5/300,
300: B4-300 + C4~300 + E5/300,
300: D5-300 + E4~300 + G5/300,
300: C5-300 + D4~300 + F5/300,
300: C5-300 + D4~300 + F5/300,
300: D5-300 + E4~300 + G5/300,
300: B4-300 + C4~300 + E5/300,
300: D5-300 + E4~300 + G5/300,
300: B4-300 + C4~300 + E5/300,
300: D5-300 + E4~300 + G5/300,
300: C5-300 + D4~300 + F5/300,
300: B4-300 + C4~300 + E5/300,
300: C5-300 + D4~300 + F5/300,
300: D5-300 + E4~300 + G5/300,
300: B4-300 + C4~300 + E5/300,
300: D5-300 + E4~300 + G5/300,
300: B4-300 + C4~300 + E5/300,
300: D5-300 + E4~300 + G5/300,
300: C5-300 + D4~300 + F5/300,
300: B4-300 + C4~300 + E5/300,
300: E5-300 + F4~300 + A5/300,
300: D5-300 + E4~300 + G5/300,
300: C5-300 + D4~300 + F5/300,
300: B4-300 + C4~300 + E5/300,
300: C5-300 + D4~300 + F5/300`
const walkMus = tune `
57.58157389635317: B5^57.58157389635317 + A5^57.58157389635317 + G5^57.58157389635317 + F5^57.58157389635317 + E5-57.58157389635317,
57.58157389635317: D5-57.58157389635317 + C5-57.58157389635317 + B4-57.58157389635317 + A4-57.58157389635317 + G4-57.58157389635317,
57.58157389635317: F4~57.58157389635317 + E4~57.58157389635317 + D4~57.58157389635317 + C4~57.58157389635317,
1669.8656429942419`
const deathMus = tune`
99.66777408637874: A5-99.66777408637874 + G5~99.66777408637874 + B5/99.66777408637874,
99.66777408637874: A5-99.66777408637874 + G5~99.66777408637874 + B5/99.66777408637874,
99.66777408637874: A5-99.66777408637874 + G5~99.66777408637874 + B5/99.66777408637874,
99.66777408637874: A5-99.66777408637874 + G5~99.66777408637874 + B5/99.66777408637874,
99.66777408637874: A5-99.66777408637874 + G5~99.66777408637874 + B5/99.66777408637874,
99.66777408637874: A5-99.66777408637874 + G5~99.66777408637874 + F5~99.66777408637874 + B5/99.66777408637874,
99.66777408637874: F5~99.66777408637874 + E5~99.66777408637874 + G5-99.66777408637874 + A5/99.66777408637874,
99.66777408637874: E5~99.66777408637874 + D5~99.66777408637874 + F5-99.66777408637874 + G5/99.66777408637874,
99.66777408637874: D5~99.66777408637874 + C5~99.66777408637874 + F5-99.66777408637874 + E5-99.66777408637874 + G5/99.66777408637874,
99.66777408637874: C5~99.66777408637874 + B4~99.66777408637874 + E5-99.66777408637874 + D5-99.66777408637874 + F5/99.66777408637874,
99.66777408637874: B4~99.66777408637874 + A4~99.66777408637874 + G4~99.66777408637874 + D5-99.66777408637874 + C5-99.66777408637874,
99.66777408637874: A4~99.66777408637874 + G4~99.66777408637874 + F4~99.66777408637874 + C5-99.66777408637874 + B4-99.66777408637874,
99.66777408637874: F4~99.66777408637874 + E4~99.66777408637874 + A4-99.66777408637874 + B4-99.66777408637874 + G4-99.66777408637874,
99.66777408637874: E4~99.66777408637874 + D4~99.66777408637874 + G4-99.66777408637874 + F4-99.66777408637874,
99.66777408637874: D4~99.66777408637874 + C4~99.66777408637874 + F4-99.66777408637874 + E4-99.66777408637874,
99.66777408637874: C4~99.66777408637874 + E4-99.66777408637874 + D4-99.66777408637874,
99.66777408637874: D4-99.66777408637874 + C4-99.66777408637874,
1495.016611295681`

//play background music FOREVERRRRRRR
const playmus = playTune(music, Infinity);

//code for pushable bush
setPushables({
	[ player ]: [bush],
  [bush]: [bush]
})

//function for step limit, must be used indide of onInput
const stepLimits = [30,45,60,100,140,180,210,300,350];

  var steps = 0

  function whenStep(){
    steps += 1
  
    clearText();
    addText("Steps left:" + (stepLimits[level] - steps),
            {x:1, y:2, color: color`3`});
  
    if (steps > stepLimits[level]) {
      clearText();
      setMap(levels[0]);
      steps = 0;
      addText("Steps left:" + (stepLimits[level] - steps),
            {x:1, y:2, color: color`3`});
      playTune(deathMus);
    }
  }



//onInput for moving (make sure the whenStep function is being used in movement)
onInput("l", () => {
  clearText();
  setMap(levels[level]);

})

onInput("s", () => {
	getFirst(player).y += 1
    whenStep();
    playTune(walkMus);
})

onInput("w", () => {
	getFirst(player).y -= 1
    whenStep();
  playTune(walkMus);
})

onInput("a", () => {
	getFirst(player).x -= 1
    whenStep();
  playTune(walkMus);
})

onInput("d", () => {
	getFirst(player).x += 1
    whenStep();
  playTune(walkMus);
})


//afterInput will check things after input; used to check for win states and portals
afterInput(() => {

  //code to kill when touching goblin
  const gameOver = tilesWith(goblin, player);

  if(gameOver.length >= 1) {
      playTune(deathMus);
      clearText();
      setMap(levels[0]);  
  }
  

  //code for portal, portal can only go one way
  const portalENTCovered = tilesWith(portalENT, player);

   if (portalENTCovered.length >= 1) {
     const pEXT = getFirst(portalEXT);
     const plr = getFirst(player);
     
     plr.x = pEXT.x;
     plr.y = pEXT.y;
   }

  //code to change levels and win game
  const goalCovered = tilesWith(goal, player);

  if (goalCovered.length >= 1) {
    level++

    if (level < levels.length) {
      setMap(levels[level]);
  }
  else {
    clearText();
    addText("You beat the game!!", {x:1, y:1, color: color`H`}); 
    addText("Congrats!!!!", {x:4, y:2, color: color`H`}); 
    }
  }
    
})