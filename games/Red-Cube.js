/*
@title: Red Cube
@author: AxelMontlahuc
@tags: [platformer, cube, jump]
@addedOn: 2025-06-08
*/

const gravity = 1;

const player = "p";
const background = "b";
const platform1 = "1";

setLegend(
  [ player, bitmap`
..333333333333..
.33333333333333.
3333333333333333
3333333333333333
3333223333223333
3333233333323333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333223333223333
3333322222233333
3333332222333333
3333333333333333
.33333333333333.
..333333333333..` ],
  [ platform1, bitmap`
D4D4D444D4D44D44
444444D4444D44D4
D44D4D444D444D4D
4D4444D4444D44D4
44C4F44C44CF44C4
CFC4CCCC4CCCC4CC
FCCCCCFCCCFCCCCF
CCCCFCCCCCCCCCCC
CCCCCCCCCCCCCFCC
CC9CCCCCC9CCCCCC
CCCCCC9CCCCCC9CC
CCCCCCCCCCCCCC9C
C9CCCCCCCC9CCCCC
CCCC9CCCC9CCCCCC
.CCCCCCCCCCCCCC.
..CCCC9CCCCC9C..` ],
  [ background, bitmap`
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777` ]
)

setBackground(background);
setSolids([ player, platform1 ]);

const levels = [
  map`
............
............
............
............
............
............
............
p...........
111111111111`, // Level 1 — flat intro, hold D to win

  map`
............
............
............
............
............
............
....11......
p...........
111....11111`, // Level 2 — simple jump needed

  map`
............
............
............
............
............
............
p..111......
1.......1...
11.....11111`, // Level 3 — small jump challenge

  map`
............
............
............
............
............
.....1......
p..1........
1...........
111....11111`, // Level 4 — stair-like pattern within 2-tile jump

  map`
............
............
............
............
.....1......
....1.......
..1.........
p......1....
1.......1111`, // Level 5 — narrow jump with climbable stairs

  map`
............
............
............
........1...
......1.....
............
....1.......
p...........
11.....11111`, // Level 6 — upper challenge, timing needed

  map`
............
............
......1.....
............
....1.......
............
..1.........
p...........
1.......1111`, // Level 7 — 2-tile jump required

  map`
............
............
............
......1.....
...1........
......1.....
...1........
p...........
11........11`, // Level 8 — back-and-forth motion forced

  map`
............
............
........1...
.11.....1...
.1..........
........1...
.11.........
p...111.....
1.........11`, // Level 9 — cross-over jumps

  map`
............
............
..1..1..1...
............
............
..1..1..1...
............
p1..........
11........11`  // Level 10 — symmetrical but not "hold D"-able
];



let currentLevel = 0;
setMap(levels[currentLevel]);

setPushables({ [ player ]: [] });

function getPlayer() {
  return getFirst(player);
}

function isOnGround() {
  const p = getPlayer();
  const below = getTile(p.x, p.y + 1);
  return below.some(t => t.type === platform1);
}

function respawn() {
  setMap(levels[currentLevel]);
  velocityY = 0;
  isJumping = false;
}

onInput("a", () => {
  getPlayer().x -= 1;
});
onInput("d", () => {
  getPlayer().x += 1;
});
onInput("w", () => {
  if (isOnGround()) {
    getPlayer().y -= 3;
  }
});

setInterval(() => {
  if (!isOnGround()) {
    getPlayer().y += 1;
  }
}, 500);

setInterval(() => {
  if (getPlayer().y >= height() - 1) {
    respawn();
  }
}, 1000);

afterInput(() => {
  const p = getPlayer();

  if (getPlayer().y >= height() - 1) {
    respawn();
  }

  if (p.x >= width() - 1) {
    currentLevel++;
    if (currentLevel < levels.length) {
      setMap(levels[currentLevel]);
    } else {
      clearText();
      addText("You win!", { x: 4, y: 6, color: color`3` });
    }
  }
});
